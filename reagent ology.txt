<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<title>Reagent-ology</title>
<style>
    body { 
        font-family: Arial, sans-serif; 
        margin: 0; 
        padding: 0;
        background-image: url('lab.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        color: white;
    }
    header {
        display: flex; 
        justify-content: space-between; 
        align-items: center; 
        padding: 10px 20px; 
        background-color: rgba(144,178,187,0.95);
        color: white;
        position: sticky;
        top: 0;
        z-index: 10;
        backdrop-filter: blur(4px);
    }
    header h1 { margin: 0; font-size: 1.4rem; }
    #login-form input { margin-right: 5px; padding:5px; border-radius:3px; border:1px solid #ccc; }
    #login-form button { padding:5px 10px; border:none; border-radius:3px; background-color:#1b8cae; color:white; cursor:pointer; }
    #login-form button:hover { background-color:#147d99; }

    nav {
        display: flex; 
        justify-content: flex-end; 
        background-color: rgba(144,178,187,0.95); 
        padding: 8px 20px;
    }
    nav button {
        padding: 6px 12px;
        margin-left: 8px;
        background-color: transparent;
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-weight: 600;
    }
    nav button:hover { background-color: rgba(0,86,179,0.2); }

    .page { display: none; margin: 20px; background-color: rgba(0,0,0,0.45); padding: 20px; border-radius: 8px; }
    #about {
        display: block;
        max-height: 700px;
        overflow-y: auto;
        padding: 20px;
        background: rgba(255, 255, 255, 0.12);
        border-radius: 10px;
    }
    #about::-webkit-scrollbar { width: 8px; }
    #about::-webkit-scrollbar-thumb { background: rgba(255,255,255,0.18); border-radius: 4px; }
    .about-section {
        margin-bottom: 20px;
        padding: 16px;
        background: rgba(0, 0, 0, 0.35);
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.4);
        transition: transform 0.12s;
    }
    .about-section:hover { transform: translateY(-4px); }
    .about-section h3 { margin-top: 0; color: #ffffff; font-size: 1.15em; }
    .about-section p, .about-section li { line-height: 1.6; color: #ecf0f1; }
    .about-section ul { padding-left: 20px; }
    #about h2 { color: #ffffff; }

    li { 
        margin-bottom: 10px; 
        padding: 10px;
        background-color: rgba(79, 128, 147, 0.72);
        border-radius: 6px;
        list-style:none;
    }
    input, button.action-btn, select { margin-right:5px; padding:6px; border-radius:4px; border:1px solid #ccc; }
    button.action-btn { cursor:pointer; border:none; color:white; padding:6px 8px; margin-left:6px; }
    button.action-btn.edit { background-color:#ffc107; color:black; }
    button.action-btn.edit:hover { background-color:#e0a800; }
    button.action-btn.delete { background-color:#dc3545; }
    button.action-btn.delete:hover { background-color:#c82333; }
    button.action-btn.use { background-color:#28a745; }
    button.action-btn.use:hover { background-color:#218838; }
    button.action-btn.discard { background-color:#6c757d; }
    button.action-btn.discard:hover { background-color:#5a6268; }
    button.action-btn.scale { background-color:#17a2b8; }
    button.action-btn.scale:hover { background-color:#138496; }

    .controls { margin-bottom: 12px; display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    .small { padding:4px 8px; font-size:0.9rem; }

    #chemical-detail { padding: 10px; background: rgba(0,0,0,0.4); border-radius:8px; }
    .topbar-right { display:flex; gap:8px; align-items:center; }
    .danger-note { color:#ffdddd; background: rgba(220,53,69,0.12); padding:8px; border-radius:6px; margin-top:8px; }
    .meta { font-size:0.9rem; color:#e6f1f5; margin-top:8px; }
</style>
</head>
<body>
    <!-- 헤더 -->
    <header>
        <div id="logo"><h1>Reagent-ology</h1></div>
        <div class="topbar-right">
            <span id="whoami" style="font-weight:600;"></span>
            <button id="logoutBtn" style="display:none;" onclick="logout()" class="small">Logout</button>
        </div>
    </header>

    <!-- 로그인 화면 -->
    <div id="login-page" style="padding:20px;">
        <h1>Reagent-ology Login</h1>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
        <button onclick="signup()">Sign Up</button>
        <div class="danger-note">
            <strong>주의:</strong> 현재는 로컬 데모 모드입니다. 실제 운영 시 서버 기반 인증(해시+HTTPS)으로 교체하세요.
        </div>
    </div>

    <!-- 메인 영역 -->
    <div id="main-page" style="display:none; padding:20px;">
        <!-- 상단 네비게이션 -->
        <nav>
            <button onclick="showPage('about')">기업 소개</button>
            <button onclick="showPage('add')">시약 등록</button>
            <button onclick="showPage('discard')">시약 폐기</button>
            <button onclick="showPage('inventory')">연구실 보유 물질</button>
            <button onclick="showPage('usage')">시약 사용 현황</button>
        </nav>

        <!-- 각 페이지 영역 -->
        <div id="about" class="page">
            <h2>Reagent-ology 소개</h2>
            <div class="about-section">
                <h3>회사 비전</h3>
                <p>우리는 연구실의 안전하고 효율적인 시약 관리를 위해 최첨단 디지털 솔루션을 제공합니다.</p>
            </div>
            <div class="about-section">
                <h3>주요 기능</h3>
                <ul>
                    <li>전 주기 시약 관리 (등록, 사용, 이동, 폐기)</li>
                    <li>GHS 기반 분류 및 경고 시스템</li>
                    <li>법적 규제 준수 지원</li>
                    <li>NFC 스티커 기반 시약 태깅</li>
                    <li>사용량, 폐기량, 보관 현황 자동 기록</li>
                </ul>
            </div>
            <div class="about-section">
                <h3>연구실 도입 효과</h3>
                <p>사용자는 직관적인 대시보드로 실험실 운영 상황을 한눈에 확인할 수 있으며, 안전 사고를 예방하고 효율적인 시약 구매 계획을 수립할 수 있습니다.</p>
            </div>
        </div>

        <div id="add" class="page">
            <h2>시약 등록 / 수정</h2>
            <div class="controls">
                <input type="hidden" id="edit-id">
                <input type="text" id="name" placeholder="Name">
                <input type="text" id="formula" placeholder="Formula">
                <input type="text" id="cas" placeholder="CAS 번호">
                <input type="text" id="location" placeholder="Location">
                <input type="text" id="storage" placeholder="보관 조건">
                <input type="date" id="expiry" placeholder="유통기한">
                <input type="text" id="hazard" placeholder="GHS 분류 (콤마로 구분)">
                <input type="text" id="disposal" placeholder="폐기 방법">
                <input type="number" step="0.01" id="quantity" placeholder="Quantity (ml/g)">
                <button onclick="saveChemical()" class="action-btn small">Save</button>
                <button onclick="resetForm()" class="small">Clear</button>
            </div>
            <div id="form-note" class="meta">필수: Name, Formula, Location, Quantity</div>
        </div>

        <div id="discard" class="page">
            <h2>시약 폐기</h2>
            <div class="controls">
                <button onclick="autoDiscardReport()" class="small">폐기 리포트 생성 (CSV)</button>
            </div>
            <ul id="discard-list"></ul>
        </div>

        <div id="inventory" class="page">
            <h2>연구실 보유 물질</h2>
            <div class="controls">
                <input type="text" id="search" placeholder="검색: 이름/공식/CAS..." oninput="renderList()">
                <select id="filterGHS" onchange="renderList()">
                    <option value="">--GHS 필터--</option>
                    <option>Flammable</option>
                    <option>Toxic</option>
                    <option>Corrosive</option>
                    <option>Oxidizer</option>
                </select>
                <select id="sortBy" onchange="renderList()">
                    <option value="id">정렬: 등록순</option>
                    <option value="name">이름</option>
                    <option value="quantity">수량(내림)</option>
                </select>
                <button onclick="exportCSV()" class="small">CSV 내보내기</button>
            </div>
            <ul id="chemical-list"></ul>
        </div>

        <div id="usage" class="page">
            <h2>시약 사용 현황</h2>
            <div class="controls">
                <button onclick="resetUsageStats()" class="small">사용 통계 리셋</button>
            </div>
            <ul id="usage-list"></ul>
        </div>

        <!-- 상세 페이지 -->
        <div id="detail-page" class="page">
            <button onclick="showPage('inventory')" class="small">← 뒤로</button>
            <div id="chemical-detail"></div>
        </div>
    </div>

<script>
/* ======================
   로컬 저장소(persistence)
   ====================== */
const STORAGE_KEY = 'reagentology_chems_v1';
const USER_KEY = 'reagentology_users_v1';
const LOGGED_KEY = 'reagentology_loggedin';

/* 임시 초기 데이터 — 최초 실행시에만 저장 */
const DEFAULT_CHEMS = [
    { id: 1, name: 'Acetone', formula: 'C3H6O', cas: '67-64-1', ghs: ['Flammable'], location: 'Shelf A', storage:'RT', quantity: 500, used:0, discarded:0, expiry:'', disposal:'화학폐기물' },
    { id: 2, name: 'Ethanol', formula: 'C2H6O', cas: '64-17-5', ghs: ['Flammable'], location: 'Shelf B', storage:'RT', quantity: 1000, used:0, discarded:0, expiry:'', disposal:'화학폐기물' },
    { id: 3, name: 'Methanol', formula: 'CH3OH', cas: '67-56-1', ghs: ['Flammable','Toxic'], location: 'Shelf A', storage:'RT', quantity: 300, used:0, discarded:0, expiry:'', disposal:'화학폐기물' },
    { id: 4, name: 'Sodium Chloride', formula: 'NaCl', cas: '7647-14-5', ghs: [], location: 'Shelf C', storage:'RT', quantity: 1000, used:0, discarded:0, expiry:'', disposal:'일반폐기물' },
];

let chemicals = [];
let usageLogs = []; // ✅ 사용기록 저장용
let suppressHashRoute = false;  // 해시 초기화 직후 hashchange 무시


/* 사용자 인증 (로컬 데모) */
function signup() {
    const username = prompt("사용할 Username 입력:");
    const password = prompt("사용할 Password 입력:");
    if(!username || !password) return alert('아이디와 비밀번호를 입력해주세요.');
    let users = JSON.parse(localStorage.getItem(USER_KEY) || '[]');
    if(users.some(u => u.username === username)) return alert('이미 존재하는 아이디입니다.');
    users.push({username, password}); // 데모: 평문 저장 (실서비스 금지)
    localStorage.setItem(USER_KEY, JSON.stringify(users));
    alert('회원가입 완료! 로그인해주세요.');
}

function login() {
    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value;
    if(!username || !password) return alert('아이디와 비밀번호를 입력해주세요.');
    let users = JSON.parse(localStorage.getItem(USER_KEY) || '[]');
    const user = users.find(u => u.username===username && u.password===password);
    if(user) {
        localStorage.setItem(LOGGED_KEY, username);
        document.getElementById('login-page').style.display='none';
        document.getElementById('main-page').style.display='block';
        document.getElementById('whoami').textContent = username;
        document.getElementById('logoutBtn').style.display = 'inline-block';
        initApp();
        handleHashRoute(); // 로그인 직후 해시 처리
    } else {
        alert('아이디 또는 비밀번호가 틀립니다.');
    }
}

function logout() {
    localStorage.removeItem(LOGGED_KEY);
    document.getElementById('login-page').style.display='block';
    document.getElementById('main-page').style.display='none';
    document.getElementById('whoami').textContent = '';
    document.getElementById('logoutBtn').style.display = 'none';
}

/* 자동 로그인 유지 */
window.onload = function() {
    const loggedUser = localStorage.getItem(LOGGED_KEY);
    if(loggedUser) {
        document.getElementById('login-page').style.display='none';
        document.getElementById('main-page').style.display='block';
        document.getElementById('whoami').textContent = loggedUser;
        document.getElementById('logoutBtn').style.display = 'inline-block';
        initApp();
    } else {
        // 최초 실행 시 샘플 데이터 넣기
        if(!localStorage.getItem(STORAGE_KEY)) {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(DEFAULT_CHEMS));
        }
    }
}

/* 앱 초기화 */
function initApp() {
    loadFromStorage();
    renderList();
    handleHashRoute(); // 해시 있으면 상세로, 없으면 기본 화면
}

/* 저장/로드 */
function loadFromStorage() {
    try {
        chemicals = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
        usageLogs = JSON.parse(localStorage.getItem('usage_logs') || '[]');
        // 보정: ghs가 문자열이면 배열로
        chemicals.forEach(c => {
            if(typeof c.ghs === 'string') c.ghs = c.ghs ? c.ghs.split(',').map(s=>s.trim()) : [];
        });
    } catch(e) {
        chemicals = DEFAULT_CHEMS.slice();
    }
}

function saveToStorage() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(chemicals));
    localStorage.setItem('usage_logs', JSON.stringify(usageLogs));
}

// ✅ 슬러그 생성 함수 (시약 이름 + CAS + 용량으로 URL 변환)
function toSlug(text){
  return String(text || '')
    .trim()
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')  // 공백이나 특수문자 → 하이픈(-)
    .replace(/^-+|-+$/g, '');     // 앞뒤 하이픈 제거
}

/* 페이지 전환 */
function showPage(pageId) {
  // 화면 전환
  document.querySelectorAll('.page').forEach(p => p.style.display = 'none');
  const pageEl = document.getElementById(pageId);
  if (pageEl) pageEl.style.display = 'block';

  // 🔻 여기 조건의 pageId는 실제 목록 페이지 id와 정확히 맞춰주세요!
  //   예: 'list-page' 또는 'main-page' 등, 본인 코드와 동일한 값
  if (pageId === 'list-page' || pageId === 'main-page') {
    suppressHashRoute = true;          // 다음 hashchange 무시
    location.hash = '';                // 해시 초기화
    setTimeout(() => { suppressHashRoute = false; }, 0);
  }
}

/* 폼 리셋 */
function resetForm() {
    ['edit-id','name','formula','cas','location','storage','expiry','hazard','disposal','quantity'].forEach(id=>document.getElementById(id).value='');
}

/* 시약 등록/수정 */
function saveChemical() {
    const id = document.getElementById('edit-id').value;
    const name = document.getElementById('name').value.trim();
    const formula = document.getElementById('formula').value.trim();
    const cas = document.getElementById('cas').value.trim();
    const location = document.getElementById('location').value.trim();
    const storage = document.getElementById('storage').value.trim();
    const expiry = document.getElementById('expiry').value;
    const hazard = document.getElementById('hazard').value.trim();
    const disposal = document.getElementById('disposal').value.trim();
    const quantityRaw = document.getElementById('quantity').value;
    const quantity = quantityRaw !== '' ? parseFloat(quantityRaw) : NaN;
    const slug = toSlug(name + '-' + cas + '-' + quantity);

    if(!name || !formula || !location || isNaN(quantity)) {
        alert('필수 항목을 채워주세요: Name, Formula, Location, Quantity');
        return;
    }

    const ghsArr = hazard ? hazard.split(',').map(s=>s.trim()).filter(Boolean) : [];

    if(id){
    // 🔹 수정일 때도 슬러그를 새로 계산해서 업데이트
    const chem = chemicals.find(c => c.id==id);
    if(chem){
        const slug = toSlug(name + '-' + cas + '-' + quantity);   // ✅ ① 추가
        Object.assign(chem, {
            name, formula, cas, location, storage, expiry,
            hazard, disposal, quantity, ghs:ghsArr,
            slug                                                  // ✅ ② 함께 저장
        });
    }
} else {
    // 🔹 새 시약 등록일 때도 슬러그를 생성
    const newId = chemicals.length ? Math.max(...chemicals.map(c=>c.id)) + 1 : 1;
    const slug = toSlug(name + '-' + cas + '-' + quantity);       // ✅ ③ 추가
    chemicals.push({
        id:newId,
        name, formula, cas, location, storage, expiry,
        hazard, disposal, quantity,
        used:0, discarded:0,
        ghs:ghsArr,
        slug                                                      // ✅ ④ 함께 저장
    });
}


    saveToStorage();
    resetForm();
    renderList();
    alert('저장이 완료되었습니다.');
}

/* 저울 사용 기능 (정밀 입력) */
function useWithScale(id) {
    const chem = chemicals.find(c => c.id === id);
    if (!chem) return;
    const beforeWeight = parseFloat(chem.quantity);
    const afterStr = prompt(`${chem.name}의 저울로 잰 남은 무게를 입력하세요 (현재: ${beforeWeight})`);
    if(afterStr === null) return; // 취소
    const afterWeight = parseFloat(afterStr);
    if (isNaN(afterWeight) || afterWeight < 0 || afterWeight > beforeWeight) {
        alert('올바른 무게를 입력해주세요 (0 ≤ after ≤ 현재 수량).');
        return;
    }
    const usedAmount = beforeWeight - afterWeight;
    chem.used = (chem.used || 0) + usedAmount;
    chem.quantity = afterWeight;
    saveToStorage();
    renderList();
}

/* 리스트 렌더링 + 검색/필터/정렬 */
function renderList() {
    loadFromStorage(); // fresh
    const list = document.getElementById('chemical-list');
    const discardList = document.getElementById('discard-list');
    const usageList = document.getElementById('usage-list');
    list.innerHTML = '';
    discardList.innerHTML = '';
    usageList.innerHTML = '';

    const q = (document.getElementById('search')?.value || '').toLowerCase();
    const ghsFilter = document.getElementById('filterGHS')?.value || '';
    const sortBy = document.getElementById('sortBy')?.value || 'id';

    let filtered = chemicals.filter(c => {
        if(q){
            const text = `${c.name} ${c.formula} ${c.cas}`.toLowerCase();
            if(!text.includes(q)) return false;
        }
        if(ghsFilter){
            if(!c.ghs || !c.ghs.includes(ghsFilter)) return false;
        }
        return true;
    });

    if(sortBy === 'name') filtered.sort((a,b)=>a.name.localeCompare(b.name));
    else if(sortBy === 'quantity') filtered.sort((a,b)=> (b.quantity||0) - (a.quantity||0));
    else filtered.sort((a,b)=> (a.id||0) - (b.id||0));

    filtered.forEach(c => {
        const li = document.createElement('li');

        // 이름(시약) 링크 만들기
        const nameLink = document.createElement('a');
        nameLink.href = `#/reagents/${c.id}`;   // 🔹 고유 주소 설정
        nameLink.textContent = c.name;
        nameLink.style.fontWeight = '700';
        nameLink.style.color = '#00bfff';
        // onclick은 삭제 — 라우터가 처리함
        li.appendChild(nameLink);


        const info = document.createElement('div');
        info.innerHTML = `<div style="margin-top:6px;">
            (${escapeHtml(c.formula || '')}) &nbsp; CAS: ${escapeHtml(c.cas||'N/A')} &nbsp; | &nbsp; 위치: ${escapeHtml(c.location||'N/A')}
            <br>보관: ${escapeHtml(c.storage||'-')} &nbsp; | &nbsp; 유통기한: ${escapeHtml(c.expiry||'-')} &nbsp; | &nbsp; 폐기: ${escapeHtml(c.disposal||'-')}
            <br>Qty: <strong>${c.quantity}</strong> &nbsp; | &nbsp; GHS: 
            </div>`;
        li.appendChild(info);

        // GHS 태그
        (c.ghs || []).forEach(tag => {
            const span = document.createElement('span');
            span.textContent = tag;
            span.style.fontWeight = '700';
            span.style.marginLeft = '8px';
            if(tag==='Flammable') span.style.color='red';
            else if(tag==='Corrosive') span.style.color='orange';
            else if(tag==='Toxic') span.style.color='purple';
            else if(tag==='Oxidizer') span.style.color='limegreen';
            li.appendChild(span);
        });

        // 버튼들
        const btnContainer = document.createElement('div');
        btnContainer.style.marginTop = '8px';

        const actions = [
            {cls:'edit', text:'Edit', onClick: ()=> {
                document.getElementById('edit-id').value = c.id;
                ['name','formula','cas','location','storage','expiry','hazard','disposal','quantity'].forEach(id => document.getElementById(id).value = c[id] || '');
                showPage('add');
            }},
            {cls:'delete', text:'Delete', onClick: ()=> {
                if(!confirm(`${c.name}을(를) 삭제하시겠습니까?`)) return;
                chemicals = chemicals.filter(x => x.id !== c.id);
                saveToStorage(); renderList();
            }},
            {cls:'use', text:'Use -10', onClick: ()=> {
                if((c.quantity || 0) >= 10){ c.used = (c.used||0)+10; c.quantity -= 10; saveToStorage(); renderList(); } 
                else alert('재고 부족');
            }},
            {cls:'discard', text:'Discard -10', onClick: ()=> {
                if((c.quantity || 0) >= 10){ c.discarded = (c.discarded||0)+10; c.quantity -= 10; saveToStorage(); renderList(); } 
                else alert('재고 부족');
            }},
            {cls:'scale', text:'Use with Scale', onClick: ()=> useWithScale(c.id)}
        ];

        actions.forEach(a=>{
            const btn = document.createElement('button');
            btn.className = `action-btn ${a.cls}`;
            btn.textContent = a.text;
            btn.onclick = a.onClick;
            btnContainer.appendChild(btn);
        });

        li.appendChild(btnContainer);
        list.appendChild(li);

        // 폐기 리스트 업데이트
        const liD = document.createElement('li');
        liD.textContent = `${c.name} - Discarded: ${c.discarded || 0}`;
        discardList.appendChild(liD);

        // 사용 현황 리스트 업데이트
        const liU = document.createElement('li');
        liU.textContent = `${c.name} - Used: ${c.used || 0}`;
        usageList.appendChild(liU);
    });
}

/* =========================
   ✅ 사용 기록 관리 함수들
   ========================= */

// 사용 기록 추가
function addUsageLog({ reagentId, prevQty, newQty, delta, source = 'scale', note = '' }) {
  const ts = Date.now();
  const nextId = (usageLogs.length ? usageLogs[usageLogs.length - 1].id : 0) + 1;
  usageLogs.push({ id: nextId, reagentId, prevQty, newQty, delta, source, note, ts });
  saveToStorage();
}

// 측정값으로 Quantity 갱신 + 기록
function updateQuantityFromMeasurement(reagentId, measuredQty, opts = {}) {
  const { ignoreZero = true, source = 'scale', note = '' } = opts;
  const chem = chemicals.find(c => c.id == reagentId);
  if (!chem) return;

  const next = Number(measuredQty);
  if (!Number.isFinite(next)) return;
  if (ignoreZero && next === 0) return;

  const prev = Number(chem.quantity) || 0;
  if (next === prev) return;

  const newQty = Math.round(next * 100) / 100;
  const prevQty = Math.round(prev * 100) / 100;
  const delta = Math.round((newQty - prevQty) * 100) / 100;

  chem.quantity = newQty; // ✅ 시약 용량 업데이트
  addUsageLog({ reagentId, prevQty, newQty, delta, source, note }); // ✅ 기록 남기기
  saveToStorage();
  renderList?.();

  // 상세 페이지가 열려 있다면 재렌더
  if (typeof renderUsageLogList === 'function') renderUsageLogList(reagentId);
  if (typeof showChemicalDetail === 'function') {
    const openId = document.getElementById('detail-page')?.style.display === 'block' ? reagentId : null;
    if (openId) showChemicalDetail(reagentId);
  }
}

function renderUsageLogList(reagentId) {
  const box = document.getElementById('usage-log');
  if (!box) return;

  const logs = usageLogs
    .filter(l => l.reagentId == reagentId)
    .sort((a, b) => b.ts - a.ts);

  if (!logs.length) {
    box.innerHTML = '<li>기록 없음</li>';
    return;
  }

  box.innerHTML = logs.map(l => {
    const when = new Date(l.ts).toLocaleString();
    const sign = l.delta > 0 ? '+' : '';
    return `<li>
      <span>${when}</span>
      &nbsp; <strong>${sign}${l.delta}</strong> → ${l.newQty}
      &nbsp; <em style="opacity:.7">${l.source || ''}</em>
      ${l.note ? `&nbsp; <span>${l.note}</span>` : ''}
    </li>`;
  }).join('');
}

/* 상세 보기 */
function showChemicalDetail(id) {
  const chem = chemicals.find(c => c.id == id);
  if (!chem) { alert('시약을 찾을 수 없습니다.'); return; }

  const detailDiv = document.getElementById('chemical-detail');

  // 기본 정보
  detailDiv.innerHTML = `
    <h2 style="margin-bottom:6px">${escapeHtml(chem.name)}</h2>
    <div class="meta" style="opacity:.8;margin-bottom:10px">
      ID: ${chem.id}${chem.slug ? ` &nbsp;|&nbsp; slug: ${escapeHtml(chem.slug)}` : ''}
    </div>

    <div class="grid" style="display:grid;grid-template-columns:1fr 1fr;gap:8px;align-items:start">
      <div>
        <p><strong>Quantity</strong>: <span id="chem-qty">${chem.quantity ?? 0}</span></p>
        <p><strong>CAS</strong>: ${escapeHtml(chem.cas || '-')}</p>
        <p><strong>Formula</strong>: ${escapeHtml(chem.formula || '-')}</p>
        <p><strong>Location</strong>: ${escapeHtml(chem.location || '-')}</p>
        <p><strong>Storage</strong>: ${escapeHtml(chem.storage || '-')}</p>
        <p><strong>Expiry</strong>: ${escapeHtml(chem.expiry || '-')}</p>
      </div>
      <div>
        <p><strong>Hazard</strong>: ${escapeHtml(chem.hazard || '-')}</p>
        <p><strong>Disposal</strong>: ${escapeHtml(chem.disposal || '-')}</p>
        <p><strong>Used</strong>: ${chem.used ?? 0}</p>
        <p><strong>Discarded</strong>: ${chem.discarded ?? 0}</p>
        <p><strong>GHS</strong>: ${
          Array.isArray(chem.ghs) && chem.ghs.length ? chem.ghs.map(g=>`<span class="tag">${escapeHtml(g)}</span>`).join(' ') : '-'
        }</p>
      </div>
    </div>

    <div style="margin-top:12px;display:flex;gap:6px;flex-wrap:wrap">
      <button class="small" onclick="promptManualQuantity(${chem.id})">수동 변경</button>
      <button class="small" onclick="showPage('list-page'); location.hash=''">목록으로</button>
      <button class="small" onclick="copyReagentLink(${chem.id})">링크 복사</button>
    </div>
  `;

  // 사용 기록 영역 추가
  detailDiv.innerHTML += `
    <h3 style="margin-top:16px">사용 기록</h3>
    <ul id="usage-log" style="margin:0;padding-left:18px"></ul>
  `;

  // 기록 렌더링
  if (typeof renderUsageLogList === 'function') renderUsageLogList(id);

  showPage('detail-page');
}

async function copyReagentLink(id){
    const url = `${location.origin}${location.pathname}#/reagents/${id}`;
    try { await navigator.clipboard.writeText(url); alert('링크가 복사되었습니다!'); }
    catch { prompt('복사 실패. 아래 링크를 수동 복사하세요:', url); }
}

/* 디테일에서 편집 열기 */
function openEditFromDetail(id) {
    const chem = chemicals.find(c=>c.id===id);
    if(!chem) return;
    ['edit-id','name','formula','cas','location','storage','expiry','hazard','disposal','quantity'].forEach(k=>{
        document.getElementById(k).value = chem[k] || '';
    });
    showPage('add');
}

/* 디테일에서 삭제 */
function promptDelete(id) {
    if(!confirm('정말 삭제하시겠습니까?')) return;
    chemicals = chemicals.filter(c=>c.id!==id);
    saveToStorage();
    renderList();
    showPage('inventory');
}

/* 간단 이동 기록(예시) */
function startTransfer(id) {
    const chem = chemicals.find(c=>c.id===id);
    if(!chem) return;
    const newLoc = prompt(`${chem.name}의 새 위치를 입력하세요 (현재: ${chem.location})`);
    if(newLoc === null) return;
    chem.location = newLoc.trim() || chem.location;
    saveToStorage(); renderList();
    alert('이동이 기록되었습니다.');
}

/* CSV 내보내기 */
function exportCSV() {
    loadFromStorage();
    if(!chemicals.length) return alert('내보낼 데이터가 없습니다.');
    const rows = [['id','name','formula','cas','location','storage','expiry','quantity','ghs','used','discarded','disposal']];
    chemicals.forEach(c => {
        rows.push([
            c.id, c.name, c.formula, c.cas, c.location, c.storage, c.expiry || '', c.quantity, (c.ghs || []).join(';'), c.used || 0, c.discarded || 0, c.disposal || ''
        ]);
    });
    const csv = rows.map(r => r.map(cell=>`"${String(cell).replace(/"/g,'""')}"`).join(',')).join('\n');
    const blob = new Blob([csv], {type: 'text/csv;charset=utf-8;'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `reagentology_export_${new Date().toISOString().slice(0,10)}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
}

/* 폐기 리포트 CSV (단순 예시) */
function autoDiscardReport(){
    loadFromStorage();
    const rows = [['name','discarded']];
    chemicals.forEach(c=>{
        rows.push([c.name, c.discarded || 0]);
    });
    const csv = rows.map(r => r.map(cell=>`"${String(cell).replace(/"/g,'""')}"`).join(',')).join('\n');
    const blob = new Blob([csv], {type: 'text/csv;charset=utf-8;'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `discard_report_${new Date().toISOString().slice(0,10)}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
}

/* 사용 통계 리셋 (데모) */
function resetUsageStats(){
    if(!confirm('모든 사용/폐기 통계를 초기화하시겠습니까?')) return;
    chemicals.forEach(c=>{ c.used = 0; c.discarded = 0; });
    saveToStorage();
    renderList();
}

/* 헬퍼: CSV/HTML 이스케이프 */
function escapeHtml(str) {
    if(str === undefined || str === null) return '';
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}

/* 작은 유틸: 삭제 등에서 사용 */
function promptDeleteByName(name){
    return confirm(`${name}을(를) 삭제하시겠습니까?`);
}

/* 페이지 전환 시 리스트 업데이트 보장 */
document.querySelectorAll('nav button').forEach(btn => btn.addEventListener('click', ()=> {
    setTimeout(renderList, 120);
}));

// ===== Hash Router =====
function parseHash() {
  // 예: "#/reagents/12" → { route: "reagents", param: "12" }
  const h = (location.hash || '').replace(/^#\/?/, ''); // "reagents/12"
  const [route, param] = h.split('/');
  return { route: route || '', param: param || '' };
}

function handleHashRoute() {
  const { route, param } = parseHash();

  // 로그인 상태 확인: 미로그인이라면 로그인 페이지 유지
  const loggedUser = localStorage.getItem('reagentology_loggedin');
  if (!loggedUser) {
    // 로그인 후 initApp()이 호출되면, 다시 handleHashRoute를 불러 상세로 진입함
    showPage('login-page'); 
    return;
  }

  if (route === 'reagents' && param) {
  // 먼저 slug로 찾고, 없으면 숫자 id로 찾기
  let chem = chemicals.find(c => c.slug === param);
  if (!chem) {
    const idNum = Number(param);
    if (!Number.isNaN(idNum)) chem = chemicals.find(c => c.id === idNum);
  }
  if (chem) {
    showChemicalDetail(chem.id);
    return;
  }
}

  // 기본 진입 화면(원래 about로 가던 흐름 유지)
  showPage('about');
}

// 해시 변경 시 라우팅
window.addEventListener('hashchange', () => {
  if (suppressHashRoute) return;   // 초기화 직후 발생한 hashchange는 무시
  handleHashRoute();
});

// 앱 초기화(initApp) 이후에도 해시를 살펴서 바로 상세로 들어가도록 콜
function initApp() {
  loadFromStorage();
  renderList();
  // 해시가 있으면 상세로, 없으면 기존처럼 about
  handleHashRoute();
}
</script>


</script>
</body>
</html>
